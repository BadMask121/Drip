# Queries for all schema
type Query{
    getVendors: [Vendor!]!
    getProducts (name:String): [Product!]!
    orders: [Order]!
    filterOrdersByDate(
      filter: String!
    ):[ReportOrders!]! #get orders reports with subscriptions
}


# Vendors Schema
type Vendor{
    id: ID!
    name: String!
    username: String!
    orders: [Order]
}
# Product Schema
type Product{
    id: ID!
    name: String!   
    price: Float!
    brand: String!
    size: Int!
    size_type: String!
    category: String!
    count: Int
}
# Order Schema
type Order{
    id: ID!
    vendor: Vendor
    product: Product
    status: String!
    quantity: Int!
    total_cost: Float!
    currency: String!
    delivery: Delivery!
    count:Int
}

# Delivery Schema
type Delivery{
    id: ID! 
    name: String!
    gender: String!
    email: String!
    phone: String
    address: Address! 
}
# Address schema
type Address{
    id: ID! 
    street: String!
    city: String!
    state: String!
    zipcode: String!
    country: String!
}
#payload schema
type AuthPayload{
    token: String
    vendor: Vendor!
}



#Reporting Schemas

# Products Reporting Schema
type ReportStocks{
    id:ID!
    vendor:[Vendor!]!
    product:[Product!]!
}
# Orders Report Schema
type ReportOrders{
    id:ID
    vendor:Vendor
    product:Product
    status: String
    quantity: Int!
    total_cost: Float!
    currency: String!
    delivery: Delivery!
    # stock: ReportStocks
}


# Vendors input schema for mutations
input inputVendor{
    id: ID!
    name: String!
    username: String!
    password: String!
}
# Product input schema for mutations
input inputProduct{
    id: ID!
    name: String!   
    price: Float!
    brand: String!
    size: Int!
    size_type: String!
    category: String!
}
# Order input schema for mutations
input inputOrder{
    id: ID!
    vendor: inputVendor!
    product: inputProduct!
    status: String!
    quantity: Int!
    total_cost: Int!
    currency: String!
    address: inputAddress!
}

# inp
input inputVendorQuery{
    id: ID!
    name: String
}
# Address schema
input inputDelivery{
    name: String!
    gender: String!
    email: String!
    phone: String
    address: inputAddress! 
}
# inputAddress for mutating address in making order
input inputAddress{
    street: String!
    city: String!
    state: String!
    zipcode: String!
    country: String!
}
# inputVendorOrder for mutating vendor in making order
input inputVendorOrder {
     id: ID!
}
# inputProductOrder for mutating uniqueOrder in making order
input inputProductUniqueOrder {
    id: ID!
}
# inputAddressUniqueOrder for mutating uniqueAdress in making order
input inputAddressUniqueOrder {
    id: ID!
}


# Mutations schema
type Mutation{

    addProduct(
        name: String!,   
        price: Float!,
        brand: String!,
        size: Int!,
        size_type: String!,
        category: String!
    ): Product!

    createAuthPayload(
        token: String
        vendor: inputVendor
    ):AuthPayload!

    createVendor(
        name: String!,
        username: String,
        password: String!,
    ): AuthPayload!

    loginVendor(
        username: String!,
        password: String!,
    ): AuthPayload!

    makeOrder(
        product: inputProductUniqueOrder!,
        status: String!,
        quantity: Int!,
        total_cost: Int!,
        currency: String!,
        delivery: inputDelivery!
    ):Order!
}
