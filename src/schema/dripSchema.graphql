


# Queries for all schema
type Query{
    getVendors (id : ID! ): [Vendor!]!
    getProducts: [Product!]!
    getOrders(vendorId: ID!): [Order!]!
}

#payload schema
type AuthPayload{
    token: String
    vendor: Vendor!
}


# Vendors Schema
type Vendor{
    id: ID!
    name: String!
    username: String!
    password: String!
}
# Product Schema
type Product{
    id: ID!
    name: String!   
    price: Float!
    brand: String!
    size: Int!
    size_type: String!
    category: String!
}
# Order Schema
type Order{
    id: ID!
    vendor: Vendor!
    product: Product!
    status: String!
    quantity: Int!
    total_cost: Float!
    currency: String!
}


# Vendors input schema for mutations
input inputVendor{
    id: ID!
    name: String!
    username: String!
    password: String!
}
# Product input schema for mutations
input inputProduct{
    id: ID!
    name: String!   
    price: Float!
    brand: String!
    size: Int!
    size_type: String!
    category: String!
}
# Order input schema for mutations
input inputOrder{
    id: ID!
    vendor: inputVendor!
    product: inputProduct!
    status: String!
    quantity: Int!
    total_cost: Int!
    currency: String!
}

# inputVendorOrder for querying vendor in making order
input inputVendorOrder {
     id: ID!
}

# inputProductOrder for querying product in making order
input inputProductOrder {
    id: ID!
}





type Mutation{

    addProduct(
        name: String!,   
        price: Float!,
        brand: String!,
        size: Int!,
        size_type: String!,
        category: String!
    ): Product!

    createAuthPayload(
        token: String
        vendor: inputVendor
    ):AuthPayload!

    createVendor(
        name: String!,
        username: String,
        password: String!,
    ): AuthPayload!

    loginVendor(
        username: String!
        password: String!
    ): AuthPayload!

    makeOrder(
        product: inputProductOrder!,
        status: String!,
        quantity: Int!
        total_cost: Int!
        currency: String!
    ):Order!
}
